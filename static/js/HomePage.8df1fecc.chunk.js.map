{"version":3,"sources":["views/HomePage/HomePage.jsx","Services/API.js","Components/MovieCard/MovieCard.module.css","Components/MovieList/MovieList.module.css","images/noimage.jpg","Components/MovieCard/MovieCard.jsx","Components/MovieList/MovieList.jsx"],"names":["Status","MovieView","useState","movies","setMovies","error","setError","status","setStatus","useEffect","fetchTrendingMovies","then","request","results","catch","err","console","log","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Base_Url","Api_Key","POSTER_URL","TREND_URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchMovieCast","id","fetchMoviesByName","name","fetchMovieDetails","fetchMovieReviews","axios","defaults","baseURL","module","exports","MovieCard","title","original_name","poster_path","release_date","vote_average","location","useLocation","className","s","movieCard","linkMovie","to","pathname","state","from","image","src","noimage","alt","fullInfo","infoMovie","infoMovieRelease","parseInt","infoMovieRating","MovieList","list","map"],"mappings":"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","file":"static/js/HomePage.8df1fecc.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { fetchTrendingMovies } from \"../../Services/API\";\r\nimport MovieList from \"../../Components/MovieList/MovieList\";\r\nimport Spinner from \"../../Components/Loader/Loader\";\r\n\r\nconst Status = {\r\n  PENDING: \"pending\",\r\n  RESOLVED: \"resolved\",\r\n  REJECTED: \"rejected\",\r\n};\r\n\r\nexport default function MovieView() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [status, setStatus] = useState(Status.PENDING);\r\n\r\n  useEffect(() => {\r\n    setStatus(Status.PENDING);\r\n    fetchTrendingMovies()\r\n      .then((request) => setMovies(request.results))\r\n      .then(setStatus(Status.RESOLVED))\r\n      .catch((err) => {\r\n        console.log(error);\r\n        setError(Status.REJECTED);\r\n      });\r\n  }, [error]);\r\n\r\n  if (status === Status.PENDING) {\r\n    return <Spinner></Spinner>;\r\n  }\r\n\r\n  if (status === Status.REJECTED) {\r\n    return toast.dark(\"ðŸ¦„Page not found\", {\r\n      position: \"top-center\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  }\r\n\r\n  if (status === Status.RESOLVED) {\r\n    return (\r\n      <>\r\n        <MovieList movies={movies}></MovieList>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nconst Base_Url = \"https://api.themoviedb.org/3\";\r\nconst Api_Key = \"febbe388fd385fbc8b7d8be3042ab312\";\r\nexport const POSTER_URL = \"https://image.tmdb.org/t/p/w500\";\r\nconst TREND_URL = `${Base_Url}/trending/movie/day?api_key=${Api_Key}`;\r\n\r\naxios.defaults.baseURL = Base_Url;\r\n\r\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchMovieCast(id) {\r\n  return fetchWithErrorHandling(\r\n    `${Base_Url}/movie/${id}/credits?api_key=${Api_Key}&language=en-US`\r\n  );\r\n}\r\nexport function fetchTrendingMovies() {\r\n  return fetchWithErrorHandling(TREND_URL);\r\n}\r\n\r\nexport function fetchMoviesByName(name) {\r\n  return fetchWithErrorHandling(\r\n    `${Base_Url}/search/movie?api_key=${Api_Key}&query=${name}&language=en-US&page=1&include_adult=false`\r\n  );\r\n}\r\n\r\nexport function fetchMovieDetails(id) {\r\n  return fetchWithErrorHandling(\r\n    `${Base_Url}/movie/${id}?api_key=${Api_Key}&language=en-US`\r\n  );\r\n}\r\n\r\nexport function fetchMovieReviews(id) {\r\n  return fetchWithErrorHandling(\r\n    `${Base_Url}/movie/${id}/reviews?api_key=${Api_Key}&language=en-US`\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieCard\":\"MovieCard_movieCard__1-AYF\",\"image\":\"MovieCard_image__3fsYT\",\"infoMovie\":\"MovieCard_infoMovie__YMFwZ\",\"infoMovieRelease\":\"MovieCard_infoMovieRelease__3HdzP\",\"infoMovieRating\":\"MovieCard_infoMovieRating__2qh_v\",\"fullInfo\":\"MovieCard_fullInfo__VDuFv\",\"linkMovie\":\"MovieCard_linkMovie__19Dfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MovieList_list__J24gA\"};","export default __webpack_public_path__ + \"static/media/noimage.ed97b93f.jpg\";","import { Link, useLocation } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport noimage from \"../../images/noimage.jpg\";\r\nimport s from \"./MovieCard.module.css\";\r\n\r\nfunction MovieCard({\r\n  id,\r\n  title,\r\n  original_name,\r\n  poster_path,\r\n  release_date,\r\n  vote_average,\r\n}) {\r\n  const location = useLocation();\r\n  return (\r\n    <li className={s.movieCard}>\r\n      <Link\r\n        className={s.linkMovie}\r\n        to={{\r\n          pathname: `/movies/${id}`,\r\n          state: { from: location },\r\n        }}\r\n      >\r\n        <img\r\n          className={s.image}\r\n          src={\r\n            poster_path\r\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\r\n              : noimage\r\n          }\r\n          alt={\"about movie\"}\r\n        />\r\n        <div className={s.fullInfo}>\r\n          <span className={s.infoMovie}>\r\n            {title ? title : original_name} |{\" \"}\r\n          </span>\r\n          <span className={s.infoMovieRelease}>\r\n            {release_date ? parseInt(release_date) : \"\"}\r\n          </span>{\" \"}\r\n          <span className={s.infoMovieRating}>{vote_average}</span>\r\n        </div>\r\n      </Link>\r\n    </li>\r\n  );\r\n}\r\n\r\nMovieCard.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string,\r\n  original_name: PropTypes.string,\r\n  release_date: PropTypes.string,\r\n  vote_average: PropTypes.number,\r\n};\r\n\r\nexport default MovieCard;\r\n","import PropTypes from \"prop-types\";\r\nimport MovieCard from \"../MovieCard/MovieCard\";\r\nimport s from \"./MovieList.module.css\";\r\n\r\nfunction MovieList({ movies }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      {movies.map(\r\n        ({\r\n          id,\r\n          title,\r\n          original_name,\r\n          poster_path,\r\n          release_date,\r\n          vote_average,\r\n        }) => {\r\n          return (\r\n            <MovieCard\r\n              key={id}\r\n              id={id}\r\n              title={title}\r\n              original_name={original_name}\r\n              poster_path={poster_path}\r\n              release_date={release_date}\r\n              vote_average={vote_average}\r\n            />\r\n          );\r\n        }\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.array,\r\n};\r\n\r\nexport default MovieList;\r\n"],"sourceRoot":""}